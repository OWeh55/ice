#include <image.h>
#include <fouriertrafo2d.h>
#include <fouriertrafo.h>

/*AppGen:Global*/

const int iFactor = 10;

class ComplexImage
{
public:
  void create(const ImageD& img)
  {
    real.create(img, true);
    imag.create(img);
    imag.set(0);
    xsize = real.xsize;
    ysize = real.ysize;
  }

  void create(const ImageD& imgr, const ImageD& imgi)
  {
    real.create(imgr, true);
    imag.create(imgi, true);
    xsize = real.xsize;
    ysize = real.ysize;
  }

  void create(const Image& img)
  {
    real.create(img.xsize, img.ysize);
    xsize = real.xsize;
    ysize = real.ysize;

    for (int y = 0; y < ysize; ++y)
      for (int x = 0; x < xsize; ++x)
        real.setPixel(x, y, img.getPixel(x, y));

    imag.create(real);
    imag.set(0);
  }

  void create(int xs, int ys)
  {
    xsize = xs;
    ysize = ys;
    real.create(xsize, ysize);
    real.set(0);
    imag.create(xsize, ysize);
    imag.set(0);
  }
  void getValue(int x, int y, double& r, double& i)
  {
    r = real.getPixel(x, y);
    i = imag.getPixel(x, y);
  }

  void setValue(int x, int y, double r, double i)
  {
    real.setPixel(x, y, r);
    imag.setPixel(x, y, i);
  }

  const ComplexImage& operator=(const ComplexImage& rhs)
  {
    real.copy(rhs.real);
    imag.copy(rhs.imag);
    return *this;
  }

  ImageD real;
  ImageD imag;
  int xsize;
  int ysize;

};

double downsize(const matrix<double>& big, matrix<double>& m)
{
  int size = m.cols();
  int bigSize = big.cols();
  int iFactor = bigSize / size;
  int iFactor2 = iFactor * iFactor;
  double sum = 0.0;

  for (int x = 0; x < size; ++x)
    {
      int xBig = x * iFactor;
      for (int y = 0; y < size; ++y)
        {
          int yBig = y * iFactor;

          double sumV = 0.0;
          for (int xx = xBig; xx < xBig + iFactor; ++xx)
            for (int yy = yBig; yy < yBig + iFactor; ++yy)
              sumV += big[xx][yy];

          double currentValue = sumV / iFactor2;
          sum += currentValue;
          m[x][y] = currentValue;
        }
    }
  return sum;
}

double makeLine(matrix<double>& m, double len, double phi_degree)
{
  double phi = Arcus(phi_degree);
  int size = int(2 * (len + 1.0));
  int bigSize = size * iFactor;
  m.resize(size, size);

  matrix<double> big(bigSize, bigSize, 0.0);
  double bigLen = len * iFactor;
  int z0 = bigSize / 2;

  LineSeg line(-cos(phi)*bigLen, -sin(phi)*bigLen, cos(phi)*bigLen, sin(phi)*bigLen);

  for (int x = 0; x < bigSize; ++x)
    {
      double dx = x - z0;
      for (int y = 0; y < bigSize; ++y)
        {
          double dy = y - z0;
          //    cout << dx << ","<<dy << " " << line.Distance(dx, dy) << endl;
          if (line.Distance(dx, dy) < 2.0)
            big[x][y] = 1.0;
          else
            big[x][y] = 0.0;
        }
    }
  return downsize(big, m);
}

double makeDisc(matrix<double>& m, double radius)
{
  int size = int(2 * (radius + 1.0));
  int bigSize = size * iFactor;

  m.resize(size, size);

  matrix<double> big(bigSize, bigSize, 0.0);

  double ifactor2 = iFactor * iFactor;
  double radius2 = radius * radius * ifactor2;

  int z0 = bigSize / 2;

  for (int x = 0; x < bigSize; ++x)
    {
      double dx = x - z0;
      dx *= dx;
      for (int y = 0; y < bigSize; ++y)
        {
          double dy = y - z0;
          dy *= dy;
          if (dx + dy < radius2)
            big[x][y] = 1.0;
        }
    }

  return downsize(big, m);
}

double makeMaskFromMatrix(const Image& mask, double par1, double par2, int mode)
{
  int xm = mask.xsize / 2;
  int ym = mask.ysize / 2;
  int mv = mask.maxval;
  int mv2 = (mv + 1) / 2;

  matrix<double> dmask;
  double factor = 0;
  switch (mode)
    {
    case 1:
      factor = makeDisc(dmask, par1);
      break;
    case 2:
      factor = makeLine(dmask, par1, par2);
      break;
    }
  mask.set(mv2);
  int ss = dmask.rows() / 2;
  for (int xi = 0; xi < dmask.cols(); ++xi)
    {
      for (int yi = 0; yi < dmask.rows(); ++yi)
        {
          int g =  0.5 * dmask[xi][yi] * mv + mv2;
          //  if (g < 0 || g > mv)
          //    cout << "!!! "  << dmask[xi][yi] << endl;
          mask.setPixel(xm - ss + xi, ym - ss + yi, g);
        }
    }
  //  cout << factor << endl;
  return factor;
}

double makeMask(const Image& mask, double par1, double par2, int mode)
{
  double result = 0;
  switch (mode)
    {
    case 1:
      result = makeMaskFromMatrix(mask, par1, par2, 1);
      break;
    case 2:
      result = makeMaskFromMatrix(mask, par1, par2, 2);
      break;
    case 99:
      // Maske aus Datei laden
      // wird nicht hier bearbeitet
      break;
    default:
      throw "Wrong mask mode";
    }
  return result;
}

/*AppGen
prog: Invertierung der Faltung
%%Beschreibung Parameter
%symbolischerName,Art,Typ,Variablenname,Erklärung,Default-Wert
para: file,optional,string,fn,Bild-Datei,""
%
opt: b, beta, double, beta, Regularisierungsparameter, 0.01
opt: f, factor, double, factor, Faktor für Faltung (0.0=auto), 0.0
opt: d, deconvolution, void, deconv, Nur inverse Faltung, false
opt: m, maskmode, int, maskMode, Modus für [Ent-]Faltungsmaske, 1
opt2:   m = 1  Kreisscheibe
opt2:   m = 2  Linie / Bewegungsunschärfe
opt: M, maskfile, string, maskFilename, Lies Maske aus Datei, ""
opt: r, radius, double, radius, Ausdehnung der Maske, 10
opt: p, phi, double, phi, Orientierung der Maske (°), 0
opt: q, quantize, void, simulateQuantization, Simuliere Quantisierung, false
opt: i, interactive, void, interactive, Interaktive Parameterwahl, false
opt: D, display, int, displayMode, Darstellung, 15
opt2:    1 - Original
opt2:    2 - Maske
opt2:    4 - gefaltet
opt2:    8 - restauriert
opt2:    16 - interaktiv
opt: o, output, string, outfile, Datei-Name für Bildausgabe, ""
opt: v, verbose, void,verbose,Anzeige der Abarbeitung, false
opt: h, help, usage, help, Hilfe
AppGen*/

void split(double& r, double& m, int& pot)
{
  constexpr double limit = sqrt(10 * 5);
  m = r;
  pot = 0;
  while (m >= limit)
    {
      m = m / 10.0;
      pot++;
    }
  while (m < limit / 10)
    {
      m = m * 10.0;
      pot--;
    }
}

double combine(double m, int pot)
{
  double res = m;
  if (pot < 0)
    for (int k = 0; k < -pot; k++)
      res /= 10;
  else
    for (int k = 0; k < pot; k++)
      res *= 10;
  return res;
}

void inc(double& r)
{
  double m;
  int pot;
  split(r, m, pot);
  constexpr double l1 = sqrt(1.0 * 2.0);
  constexpr double l2 = sqrt(2.0 * 5.0);
  if (m < l1)
    m = 2.0;
  else if (m < l2)
    m = 5.0;
  else
    m = 10.0;
  r = combine(m, pot);
}

void dec(double& r)
{
  double m;
  int pot;
  split(r, m, pot);
  constexpr double l1 = sqrt(1.0 * 2.0);
  constexpr double l2 = sqrt(2.0 * 5.0);
  if (m < l1)
    m = 0.5;
  else if (m < l2)
    m = 1.0;
  else
    m = 2.0;
  r = combine(m, pot);
}

/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  try
    {
      if (displayMode & 16) // interakiv?
        displayMode = 16;   // disable all other displays

      Image src;

      if (!fn.empty())
        {
          if (verbose)
            cout << "Lese" << fn << endl;
          src = ReadImg(fn);
        }
      else
        {
          if (verbose)
            cout << "Erzeuge Testbild" << endl;
          // simples testbild
          src.create(1000, 750, 255);

          src.set(20); // hintergrund

          for (int i = 0; i < 200; i++)
            {
              int x = Random(800);
              int y = Random(550);
              Circle c(x + 100, y + 100, 8);
              draw(c, src, 127, 255);
            }

        }

      if (!maskFilename.empty())
        maskMode = 99;

      if (displayMode & 1)
        Show(ON, src, "Original");

      int xSize = src.xsize;
      int ySize = src.ysize;

      ComplexImage srcSp;
      srcSp.create(xSize, ySize);

      if (verbose)
        cout << "FT(src)" << endl;

      FourierTrafo2D ft2;
      ft2.setInput(src);
      ft2.getResult(srcSp.real, srcSp.imag);

      if (verbose)
        cout << "ErzeugeMaske" << endl;

      Image mask;
      mask.create(src);

      if (displayMode & 2)
        Show(ON, mask, "Filter-Maske");

      //Maske kreieren
      double maskNorm;
      if (maskMode != 99)
        maskNorm = makeMask(mask, radius, phi, maskMode);
      else
        {
          Image temp;
          temp.create(xSize, ySize, 255);
          temp.read(maskFilename);
          int min = 255;
          int max = 0;
          int xmin = 0, ymin = 0;
          for (int y = 0; y < ySize; ++y)
            for (int x = 0; x < xSize; ++x)
              {
                int val = temp.getPixel(x, y);
                if (val < min)
                  {
                    min = val;
                    xmin = x;
                    ymin = y;
                  }
                if (val > max)
                  max = val;
              }
          int xShift = xSize / 2 - xmin;
          int yShift = ySize / 2 - ymin;
          double sum = 0;
          for (int y = 0; y < ySize; ++y)
            for (int x = 0; x < xSize; ++x)
              {
                int val = temp.getPixel(x, y);
                val -= max;
                val = val * 255 / (min - max);
                mask.setPixel((x + xShift + xSize) % xSize, (y + yShift + ySize) % ySize, val);
                sum += val;
              }
          maskNorm = sum;

        }

      if (verbose)
        cout << "FT(mask)" << endl;

      ComplexImage maskSp;
      maskSp.create(xSize, ySize);
      ft2.setInput(mask);
      ft2.getResult(maskSp.real, maskSp.imag);

      ComplexImage destSp;
      destSp.create(xSize, ySize);

      if (!deconv)
        {
          if (verbose)
            cout << "Faltung(imSpektrum)" << endl;

          ConvolutionFImgD(srcSp.real, srcSp.imag,
                           maskSp.real, maskSp.imag,
                           destSp.real, destSp.imag);
        }
      else
        destSp = srcSp;

      if (verbose)
        cout << "IFT(gefaltet)" << endl;

      ft2.setParameter(src.ysize, src.xsize, false);
      ft2.setInput(destSp.real, destSp.imag);
      // cout << "Input set" << endl;
      Image dest;
      dest.create(src);
      ft2.getResult(dest, ADAPTIVE);
      // cout << "output get" < <endl;
      if (displayMode & 4)
        Show(ON, dest, "Gefaltetes Bild");

      if (simulateQuantization)
        {
          // Spektrum erneut aus 8Bit-Bild berechnen
          ft2.setParameter(ySize, xSize, true);
          ft2.setInput(dest);
          ft2.getResult(destSp.real, destSp.imag);
        }

      Image rest;
      rest.create(src);
      if (displayMode & 8)
        Show(ON, rest, "Restauriert");
      ComplexImage restSp;
      restSp.create(xSize, ySize);

      if (!interactive)
        {
          if (verbose)
            cout << "InvConvolutionImg" << endl;

          InvConvolution(mask, dest, rest, factor / maskNorm, beta);
          GetChar();
        }
      else
        {
          Image display;
          display.create(src);
          int select = 0; // no (special) display
          if (displayMode == 16)
            {
              Show(GRAY, display);
              select = 4; // display restored image
            }

          bool done = false;
          bool changed = true;
          double radiusAlt = radius;
          double phiAlt = phi;
          double deltaR = 0.5;
          double deltaPhi = 5;  // degree
          char iMode = 'R';
          while (!done)
            {
              ClearAlpha();
              Printf("radius: %4.2f (d: %4.2f)  phi: %5.3f "
                     "(d: %4.1f) beta: %6.1e  factor: %6.1e\n",
                     radius, deltaR, phi, deltaPhi, beta, factor);

              Printf("R/r - radius groesser/kleiner\n");
              Printf("P/p - phi groesser/kleiner\n");
              Printf("B/b - beta groesser/kleiner\n");
              Printf("F/f - factor groesser/kleiner\n");
              Printf("0   - factor gleich Null == adaptive\n");
              Printf("+/- - Schrittweite (radius/phi) groesser/kleiner\n");
              if (select != 0)
                Printf("D   - naechster Darstellungsmodus\n");
              if (changed)
                {
                  // Spektren von Maske und zu restaurierenden Bild sind gültig
                  for (int y = 0; y < ySize; ++y)
                    for (int x = 0; x < xSize; ++x)
                      {
                        double mr, mi;
                        maskSp.getValue(x, y, mr, mi);
                        double br, bi;
                        destSp.getValue(x, y, br, bi);
                        double b2 = mr * mr + mi * mi;
                        double fx = (x - xSize / 2.0) / xSize;
                        double fy = (y - ySize / 2.0) / ySize;
                        double alpha = -4 + 4 * cos(sqrt(fx * fx + fy * fy) * 2 * M_PI);
                        alpha = alpha * alpha;
                        double nom = b2 + beta; // *alpha*alpha;
                        double rr = mr * br + bi * mi;
                        double ri = -br * mi + bi * mr;
                        if (factor != 0)
                          {
                            rr *= factor;
                            ri *= factor;
                          }
                        restSp.setValue(x, y, rr / nom, ri / nom);
                      }

                  ft2.setParameter(ySize, xSize, false, true);
                  ft2.setInput(restSp.real, restSp.imag);
                  if (factor == 0)
                    ft2.getResult(rest, ADAPTIVE, SIGNED);
                  else
                    ft2.getResult(rest, RAW, SIGNED);
                }

              switch (select)
                {
                case 1:
                  CopyImg(src, display);
                  break;
                case 2:
                  CopyImg(mask, display);
                  break;
                case 3:
                  CopyImg(dest, display);
                  break;
                case 4:
                  CopyImg(rest, display);
                  break;
                }

              int c = GetChar();

              changed = true;
              switch (c)
                {
                case '+':
                  if (iMode == 'R')
                    inc(deltaR);
                  else
                    inc(deltaPhi);
                  break;
                case '-':
                  if (iMode == 'R')
                    dec(deltaR);
                  else
                    dec(deltaPhi);
                  break;
                case'r':
                  iMode = 'R';
                  if (radius > 1.0)
                    radius -= deltaR;
                  break;
                case'R':
                  iMode = 'R';
                  radius += deltaR;
                  break;
                case 'p':
                  iMode = 'P';
                  phi -= deltaPhi;
                  break;
                case 'P':
                  iMode = 'P';
                  phi += deltaPhi;
                  break;
                case'b':
                    beta /= sqrt(10);
                  break;
                case'B':
                    beta *= sqrt(10);
                  break;
                case'f':
                    if (factor == 0)
                      factor = 1.0;
                  factor /= sqrt(sqrt(10));
                  break;
                case'F':
                    if (factor == 0)
                      factor = 1.0;
                  factor *= sqrt(sqrt(10));
                  break;
                case '0':
                  factor = 0;
                  break;
                case 'D':
                  select++;
                  if (select > 4)
                    select = 1;
                  break;
                case'X':
                case'x':
                case'Q':
                case'q':
                  done = true;
                default:
                  changed = false;
                }

              if (radius != radiusAlt || phi != phiAlt)
                {
                  // maske neu aufbauen
                  maskNorm = makeMask(mask, radius, phi, maskMode);
                  // Spektrum berechnen
                  ft2.setInput(mask);
                  ft2.getResult(maskSp.real, maskSp.imag);
                  radiusAlt = radius;
                  phiAlt = phi;
                }
            }
        }

      if (!outfile.empty())
        {
          dest.write(outfile);
        }
    }
  catch (const char* msg)
    {
      cout << "Exception: " << msg << endl;
    }
  return OK;
}
