#include <iomanip>

#include <image.h>
#include <Convolution.h>

// test class Comvolution

void print(const vector<double>& v, bool index = true, bool sc = false)
{
  int width = 9;
  int dim = v.size();
  int n = dim;
  if (n > 20)
    n = 20;
  if (index)
    {
      for (int i = 0; i < n; ++i)
        cout << setw(width) << i << " ";
      cout << endl;
    }
  double sum2 = 0;
  for (int i = 0; i < n; ++i)
    {
      int idx = i;
      while (idx < 0) idx += dim;
      sum2 += v[idx] * v[idx];
      if (sc)
        cout << setw(width) << setprecision(2) << scientific << v[idx] << " ";
      else
        cout << setw(width) << setprecision(4) << fixed << v[idx] << " ";
    }
  cout << "(" << sqrt(sum2) << ")";
  cout << endl;
}

/*AppGen:Global*/

/*AppGen
prog: test of ConvolutionC
%%Beschreibung Parameter
%symbolischerName,Art,Typ,Variablenname,ErklÃ¤rung,Default-Wert
%
opt: n, vsize, int, vsize, vektor size, 9
opt: v, verbose, void, verbose, more messages during processing, false
opt: h, help, usage, help, Hilfe
AppGen*/

/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  try
    {
      vector<double> f1(vsize, 0.0);
      vector<double> f2(vsize, 0.0);

      for (int i = 0; i < vsize; i++)
        {
          if (i < vsize / 2)
            f2[i] = 2.0 / vsize;
        }
      f1 = f2;


      cout << "\"manual\" convolution" << endl;
      print(f1, true);
      print(f2, false);

      vector<double> result1(vsize, 0.0);
      for (int i = 0; i < vsize; i++)
        {
          double sum = 0;
          for (int k = 0; k < vsize; k++)
            sum += f1[k] * f2[(vsize + i - k) % vsize];
          result1[i] = sum;
        }
      print(result1, true);

      cout << endl << "convolution with Convolution" << endl;
      print(f1, true);
      print(f2, false);
      vector<double> result2;
      Convolution conv;
      conv.setInput(f1, f2);
      conv.getResult(result2);
      print(result2, true);
      cout << "difference" << endl;
      print(result2 - result1, true, true);

      cout << endl << "convolution with Convolution(centered)" << endl;
      print(f1, true);
      print(f2, false);

      Convolution convc(vsize, true);
      convc.setInput(f1, f2);
      convc.getResult(result2);
      print(result2, true);
      cout << "difference" << endl;
      print(result2 - result1, true, true);

      vector<double> result3;
      cout << "static method of Convolution" << endl;
      print(f1, true);
      print(f2, false);
      Convolution::convolute(f1, f2, result3);
      print(result3, true);
      cout << "difference" << endl;
      print(result3 - result1, false, true);

    }
  catch (const char* msg)
    {
      cout << "Exception: " << msg << endl;
    }
  return OK;
}
