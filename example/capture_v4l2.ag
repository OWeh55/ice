#include <image.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <getopt.h>

#include <string>
#include <vector>
#include <iostream>

#include <devices/v4l2device.h>

/*AppGen:Global*/

const int fmt_yuyv = 1;
const int fmt_rgb24 = 2;

int pix_format = fmt_yuyv;
int io = V4L2Device::IO_METHOD_AUTO;

/*AppGen
 prog: Capture images with video4linux2
 %% decription of parameters
 % symbolischerName, Art, Typ,   Variablenname, ErklÃ¤rung, Default-Wert

 %
 opt: d, device, string, devName, v4l2 device name, "/dev/video0"
 opt: m, readmode, string, mode, Device read mode, "mmap"
 opt2:   mode=mmap   memory mapped io (default)
 opt2:   mode=read   read io
 opt2:   mode=uptr   user pointer memory mapped io
 opt: l, listmodes, void, listmodes, List all modes(formats) for device, false

 opt: x, xsize, int, width, Width of image, 0
 opt: y, ysize, int, height, Height of image, 0
 opt: r, frate, int, frate, Frame rate (fps), 1000000

 opt: n, nframes, int, nFrames, Number of frames to capture, 1

 opt: S, startframe, int, startFrame, Start with frame n, 1
 opt: i, ignore, int, ignoreFrames, Ignore n frames between captured frames, 0

 opt: o, outfile, string, outfilename, Write images to file, ""
 opt2:   no name - no output to file
 opt2:   if nframes>1 - numbered files
 opt2:   if nframes=1 - name with extension
 opt: s, show, void, display, Show image during capture, false
 opt: w, wait, void, wait, Wait before exit, false

 opt: v, verbose, void, verbose, Be verbose, false
 opt: h, help, usage, , This help, false
 AppGen*/

/*AppGen:Main*/
int main(int argc, char** argv)
{
  /*AppGen:MainEnd*/
  Image imgr, imgg, imgb;

  if (outfilename.empty())
    {
      display = true;
      wait = true;
    }

  V4L2Device mycamera(devName, io);

  if (listmodes)
    {
      vector<V4L2Device::Mode> modes = mycamera.getModes();
      for (auto mode : modes)
        {
          mode.print();
#if 0
          cout << mode.formatString() << " ";
          cout << mode.width << " x " << mode.height << " ";
          mode.printFrameRate();
#endif
          cout << endl;
        }
    }

  if (width != 0 || height != 0)
    {
      if (width != 0 && height != 0)
        {
          if (!mycamera.setFormat(width, height))
            {
              cout << "setFormat failed" << endl;
              exit(1);
            }
        }
      else
        cout << "Width or height undefined" << endl;
    }

  if (verbose)
    {
      cout << "set mode ";
      mycamera.getCurrentMode().print();
      cout << endl;
    }

  width = mycamera.getCurrentMode().width;
  height = mycamera.getCurrentMode().height;

  imgr = NewImg(width, height, 255);
  imgg = NewImg(width, height, 255);
  imgb = NewImg(width, height, 255);

  if (display)
    Show(_RGB, imgr, imgg, imgb);

  mycamera.startCapturing();

  if (startFrame > 0)
    {
      if (verbose)
        cout << "ignoring frames" ;
      for (int i = 0; i < startFrame; ++i)
        {
          mycamera.getImg(imgr, imgg, imgb);
          if (verbose)
            cout << ".";
          cout.flush();
        }
      if (verbose)
        cout << endl;
    }
  for (int count = 0; count < nFrames; count++)
    {
      mycamera.getImg(imgr, imgg, imgb);

      if (!outfilename.empty())
        {
          string filename = outfilename;
          if (nFrames > 1)
            {
              filename +=  "." + NumberString(count, -6) + ".jpg";
            }
          WriteImg(imgr, imgg, imgb, filename);
          if (verbose)
            cout << "wrote " << filename << endl;
        }
      for (int i = 0; i < ignoreFrames; ++i)
        {
          mycamera.getImg(imgr, imgg, imgb);
          if (verbose)
            cout << ".";
          cout.flush();
        }
      if (verbose)
        cout << endl;
    }

  mycamera.stopCapturing();

  if (wait)
    GetChar();

  exit(EXIT_SUCCESS);

  return 0;
}
