// Programm zur Anwendung der DFT auf Bilder
//

#include <image.h>

/*AppGen:Global*/

/*AppGen
 prog: Anwendung DFT auf Bilder
 %% Beschreibung Parameter
 % symbolischerName, Art, Typ,   Variablenname, Erklärung, Default-Wert
 para: file, required, string, filename, Zu verarbeitendes Bild, ""
 para: file2, optional, string, filename2, Zweites Bild (Imaginärteil), ""
 %
 opt: o, output, string, outfilename, Ausgabe-Dateiname, ""
 opt: O, outputmode, char, omode, Typ der Ausgabe, 'p'
 opt2:   r - Real-Teil
 opt2:   i - Imaginärteil
 opt2:   m - Amplitudenspektrum
 opt2:   p - Leistungsspektrum
 opt2:   R - Real-Teil und Originalbild
 opt2:   I - Imaginärteil und Originalbild
 opt2:   M - Amplitudenspektrum und Originalbild
 opt2:   P - Leistungsspektrum und Originalbild
 opt: i, invers, void, inverse, Inverse DFT, false
 opt: d, nodisplay, void, noDisplay, Keine Anzeige der Bilder, false
 opt: D, nodc, void, nodc, Gleichanteil ausblenden, false
 opt: F, maxfrequency, int, maxf, Maximale Frequenz, 0
 opt: L, logrange, double, logRange, Logarithmische Darstellung , 0
 opt2:   Parameter ist Verhältnis max zu min
 opt: X, outputwidth, int, xout, Bildgröße X der Datei-Ausgabe, 0
 opt: Y, outputheight, int, yout, Bildgröße Y der Datei-Ausgabe, 0
AppGen*/

/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  Image sourceReal;
  sourceReal.read(filename);
  if (!noDisplay)
    Show(ON, sourceReal);
  int xs = sourceReal.xsize;
  int ys = sourceReal.ysize;
  int x0 = xs / 2;
  int y0 = ys / 2;
  Image sourceImag;
  if (!filename2.empty())
    {
      sourceImag.read(filename2);
      if (!noDisplay)
        Show(ON, sourceImag);
    }
  else
    {
      sourceImag.create(sourceReal);
      sourceImag.set(0);
    }
  FourierTrafo2D tr(sourceReal.ysize, sourceReal.xsize, !inverse);
  // cout << sourceReal.xsize << " " << sourceReal.ysize<<endl;
  // cout << sourceImag.xsize << " " << sourceImag.ysize<<endl;
  tr.setInput(sourceReal, sourceImag, 1.0, UNSIGNED);
  ImageD resReal;
  resReal.create(xs, ys);
  ImageD resImag;
  resImag.create(xs, ys);

  tr.getResult(resReal, resImag);

  if (nodc)
    {
      resReal.setPixel(x0, y0, 0.0);
      resImag.setPixel(x0, y0, 0.0);
    }

  ImageD resPower;
  resPower.create(xs, ys);
  ImageD resMag;
  resMag.create(xs, ys);

  WindowWalker ww(resMag);

  for (ww.init(); !ww.ready(); ww.next())
    {
      double r = resReal.getPixel(ww);
      double i = resImag.getPixel(ww);
      double power = r * r + i * i;
      resPower.setPixel(ww, power);
      resMag.setPixel(ww, sqrt(power));
    }

  Image resultReal;
  resultReal.create(xs, ys, 255);
  Image resultImag;
  resultImag.create(xs, ys, 255);
  Image resultMag;
  resultMag.create(xs, ys, 255);
  Image resultPower;
  resultPower.create(xs, ys, 255);

  Window w(0, 0, xs - 1, ys - 1);
  if (maxf > 0)
    {
      int x1 = x0 - maxf;
      if (x1 < 0)
        x1 = 0;
      int x2 = x0 + maxf;
      if (x2 >= xs)
        x2 = xs - 1;
      int y1 = y0 - maxf;
      if (y1 < 0)
        y1 = 0;
      int y2 = y0 + maxf;
      if (y2 >= ys)
        y2 = ys - 1;
      w = Window(x1, y1, x2, y2);
    }

  // Verkleinerte Bilder zur Darstellung eines zentralen Ausschnittes
  Image resultR(resultReal, w);
  Image resultI(resultImag, w);
  Image resultM(resultMag, w);
  Image resultP(resultPower, w);
  if (!noDisplay)
    {
      Show(ON, resultR, "Result real");
      Show(ON, resultI, "Result imag");
      Show(ON, resultM, "Result magnitude");
      Show(ON, resultP, "Result power");
    }

  ConvImgDImg(resReal, resultReal, ADAPTIVE, SIGNED);
  ConvImgDImg(resImag, resultImag, ADAPTIVE, SIGNED);

  if (logRange > 0)
    {
      double maxMag = 0;
      for (ww.init(); !ww.ready(); ww.next())
        {
          double m = resMag.getPixel(ww);
          if (m > maxMag)
            maxMag = m;
        }

      double minLog = log(maxMag / logRange);

      for (ww.init(); !ww.ready(); ww.next())
        {
          double m = resMag.getPixel(ww);
          if (m > 0)
            m = log(m);
          if (m < minLog)
            m = minLog;
          resMag.setPixel(ww, m);
        }
    }

  ConvImgDImg(resMag, resultMag, ADAPTIVE, UNSIGNED);
  ConvImgDImg(resPower, resultPower, ADAPTIVE, UNSIGNED);

  if (!outfilename.empty())
    {
      Image out;

      switch (omode)
        {
        case 'r':
        case 'R':
          out.copy(resultR);
          break;
        case 'i':
        case 'I':
          out.copy(resultI);
          break;
        case 'm':
        case 'M':
          out.copy(resultM);
          break;
        case 'p':
        case 'P':
          out.copy(resultP);
          break;
        }

      if (omode == 'R' || omode == 'I' || omode == 'M' || omode == 'P')
        {
          Image combined;
          combined.create(out.xsize * 2, out.ysize, out.maxval);
          combined.set(255);
          WindowWalker ow(out);
          for (ow.init(); !ow.ready(); ow.next())
            combined.setPixel(ow + IPoint(out.xsize, 0), out.getPixel(ow));
          int fx = (xs + out.xsize) / out.xsize;
          int fy = (ys + out.ysize) / out.ysize;
          if (fy > fx)
            fx = fy;
          for (ow.init(); !ow.ready(); ow.next())
            {
              int val = 255;
              if (sourceReal.inside(ow.x * fx, ow.y * fx))
                val = sourceReal.getPixel(ow.x * fx, ow.y * fx);
              combined.setPixel(ow, val);
            }
          out = combined;
        }

      int xo = xs;
      if (xout > 0)
        xo = xout;
      int yo = ys;
      if (yout > 0)
        yo = yout;

      if (xo != xs || yo != ys) // needs resize ?
        {
          Image resized;
          resized.create(xo, yo, 255);
          RenormImg(out, resized);
          out = resized;
        }
      out.write(outfilename);
    }

  if (!noDisplay)
    GetChar();
  return 0;
}

