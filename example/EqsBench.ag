#include <image.h>

/*AppGen:Global*/

/*AppGen
 prog: Test and benchmark of matrices and equation systems
 %% Beschreibung Parameter
 % symbolischerName, Art, Typ,   Variablenname, Erkl√§rung, Default-Wert
 % para: dir, optional, string, dir, Verzeichnis mit Bildern, "."
 %
 opt: d, dimension, int, dim, Dimension of matrices, 5

 opt: s, seed, int, seed, Seed value for drand48, 0
 opt2:   -s 0 uses time for seed
 opt: c, check, void, check, Test mode, false
 opt: b, benchmark, void, bench, Benchmark mode, false
 opt2: if neither test mode nor benchmark mode is selected,
 opt2: both are executed
 opt: e, epsilon, Double, epsilon, Allowed error for double values, 1e-14
 opt: v, verbose, Void, verbose, Output matrices, false
 opt: t, times, int, times, Number of repetitions, 100000
 opt: h, help, usage, help, Hilfe
AppGen*/

typedef matrix<double> dMatrix;

typedef vector<double> dVector;

dMatrix mkNPM(int dim)
{
  dMatrix matrix(dim, dim);
  do
    {
      for (int r = 0; r < dim; r++)
        for (int c = 0; c < dim; c++)
          matrix[r][c] = (drand48() - 0.5);
    }
  while (isPositiveDefinite(matrix));
  return matrix;
}

void printTime(const string& p, double ta)
{
  cout << p << ": ";
  if (ta >= 0.1)
    cout << ta << " s" << endl;
  else if (ta >= 0.0001)
    cout << ta * 1000 << " ms" << endl;
  else
    cout << ta * 1e6 << " us" << endl;
}

void printMatrix(const string& p, const dMatrix& mat, bool verb = verbose)
{
  if (verb)
    {
      cout << p << endl;
      cout << fixed;
      cout << setw(5) << mat << endl;
      cout << scientific;
    }
}

bool equal(double d1, double d2, double eps = epsilon)
{
  return fabs(d1 - d2) < eps;
}

double diffUnity(const matrix<double>& m)
{
  double maxdiff = 0.0;
  for (int r = 0; r < m.rows(); r++)
    for (int c = 0; c < m.cols(); c++)
      {
        double v = (r == c) ? 1.0 : 0.0;
        double diff = fabs(m[r][c] - v);
        if (diff > maxdiff)
          maxdiff = diff;
      }
  return maxdiff;
}

double diffZero(const matrix<double>& m)
{
  double maxdiff = 0.0;
  for (int r = 0; r < m.rows(); r++)
    for (int c = 0; c < m.cols(); c++)
      {
        double diff = fabs(m[r][c]);
        if (diff > maxdiff)
          maxdiff = diff;
      }
  return maxdiff;
}

/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  if (!(bench || check))
    bench = check = true;

  if (seed == 0)
    srand48(time(nullptr));
  else
    srand48(seed);

  dMatrix unity(dim, dim, 1);
  dMatrix matrix1 = mkNPM(dim);
  dMatrix matrix2 = matrix1 * !matrix1;

  cout << boolalpha;

  if (check)
    {
      printMatrix("matrix1", matrix1);
      printMatrix("matrix2", matrix2);
    }

  if (check)
    {
      bool pd = isPositiveDefinite(matrix1);
      if (pd)
        cout << "Error: matrix1 isPositiveDefinite false positive" << endl;
      pd = isPositiveDefinite(matrix2);
      if (!pd)
        cout << "Error: matrix2 isPositiveDefinite false negative" << endl;
      if (verbose)
        {
          cout << "matrix1 is positiv definit: " << isPositiveDefinite(matrix1) << endl;
          cout << "matrix2 is positiv definit: " << isPositiveDefinite(matrix2) << endl;
        }
    }

  if (bench)
    {
      volatile bool pd;
      double ta = TimeD();
      for (int i = 0; i < times; i++)
        {
          pd = isPositiveDefinite(matrix1);
        }
      printTime("isPositiveDefinite (false)", (TimeD() - ta) / times);
      ta = TimeD();
      for (int i = 0; i < times; i++)
        {
          pd = isPositiveDefinite(matrix2);
        }
      printTime("isPositiveDefinite (true)", (TimeD() - ta) / times);
    }

  if (check)
    {
      double det1 = Determinant(matrix1);
      if (verbose)
        {
          cout << "Determinant(matrix1)" << endl;
          cout << setw(5) << det1 << endl;
        }
      double det2 = Determinant(matrix2);
      double det2c = CholeskyDeterminant(matrix2);
      if (verbose)
        {
          cout << "Determinant(matrix2)" << endl;
          cout << setw(5) << det2 << endl;
          cout << setw(5) << det2c << endl;
        }
      if (!equal(det2, det2c))
        {
          cout << "Determinant(matrix2) and CholeskyDeterminant(matrix2) differ by " << fabs(det2 - det2c) << endl;
          cout << det2 << " <-> " << det2c << endl;
        }
    }
  if (bench)
    {
      volatile double det;
      double ta = TimeD();
      for (int i = 0; i < times; i++)
        det = Determinant(matrix2);
      printTime("Determinant", (TimeD() - ta) / times);
      ta = TimeD();
      for (int i = 0; i < times; i++)
        det = CholeskyDeterminant(matrix2);
      printTime("CholeskyDeterminant", (TimeD() - ta) / times);
    }

  if (check)
    {
      dMatrix imatrix2 = Inverse(matrix2);
      if (verbose)
        printMatrix("Inverse(matrix2)", imatrix2);
      dMatrix m = imatrix2 * matrix2;
      double diff = diffUnity(m);
      if (diff > epsilon)
        {
          cout << "Inverse(matrix2) * matrix2 differs from unity by " << diff << endl;
          if (dim < 8)
            printMatrix("diff:", m - unity, true);
        }

      dMatrix cimatrix2 = CholeskyInverse(matrix2);
      if (verbose)
        printMatrix("CholeskyInverse(matrix2)", cimatrix2);
      m = cimatrix2 * matrix2;
      diff = diffUnity(m);
      if (diff > epsilon)
        {
          cout << "CholeskyInverse(matrix2) * matrix2 differs from unity by " << diff << endl;
          if (dim < 8)
            printMatrix("diff:", m - unity, true);
        }
      if (verbose)
        printMatrix("CholeskyInverse - Inverse", (cimatrix2 - imatrix2));
    }

  if (bench)
    {
      dMatrix inv;
      double ta = TimeD();
      for (int i = 0; i < times; i++)
        inv = Inverse(matrix2);
      printTime("Inverse", (TimeD() - ta) / times);

      ta = TimeD();
      for (int i = 0; i < times; i++)
        inv = CholeskyInverse(matrix2);
      printTime("CholeskyInverse", (TimeD() - ta) / times);
    }

  if (check)
    {
      dVector iv(dim);
      for (int i = 0; i < dim; i++)
        iv[i] = drand48();
      dVector x = solveLinearEquation(matrix1, iv);
      dVector diff = iv - matrix1 * x;
      double error = length(diff);
      if (error > epsilon)
        {
          cout << "solveLinearEquation: b and A * x differ by " << error << endl;
        }

      x = solveLinearEquation(matrix2, iv);
      diff = iv - matrix2 * x;
      error = length(diff);
      if (error > epsilon)
        {
          cout << "solveLinearEquation: b and A * x differ by " << error << endl;
        }
    }

  if (bench)
    {
      dVector iv(dim);
      for (int i = 0; i < dim; i++)
        iv[i] = drand48();
      dVector x(dim);
      double ta = TimeD();
#if 0
      for (int i = 0; i < times; i++)
        x = solveLinearEquation(matrix1, iv);
      printTime("solveLinearEquation", (TimeD() - ta) / times);
      ta = TimeD();
#endif
      for (int i = 0; i < times; i++)
        x = solveLinearEquation(matrix2, iv);
      printTime("solveLinearEquation", (TimeD() - ta) / times);
    }
  return OK;
}
