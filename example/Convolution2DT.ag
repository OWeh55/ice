#include <image.h>
// test FourierTrafo2D
/*AppGen:Global*/

#include "matrixfunctiontools.cpp"

/*AppGen
  prog: test of class FourierTrafo
  %% Beschreibung Parameter
  % symbolischerName, Art, Typ,   Variablenname, Erkl√§rung, Default-Wert
  % no parameter
  %
  opt: 1, function1, int, f1type, Type of function 1, 1
  opt: 2, function2, int, f2type, Type of function 2, 1
  opt2:  0 - delta function (shift x,y)
  opt2:  1 - gauss like function e^(-dd/para) (center x,y)
  opt2:  2 - sin function (number of cycles x, y)
  opt2:  3 - cos function (number of cycles x, y)
  opt2:  4 - white noise (strength, window radius)

  opt: p, parameter1, double, f1para1, Parameter for function 1, 0.0
  opt: P, parameter2, double, f1para2, Parameter for function 1, 0.0
  opt: q, parameter1, double, f2para1, Parameter for function 2, 0.0
  opt: Q, parameter2, double, f2para2, Parameter for function 2, 0.0

  opt: m, matrices, void, matrices, Nur Matrizen testen, false
  opt: i, images, void, images, Nur Bilder testen, false
  opt: d, doubleimages, void, doubleImages, Nur Gleitkomma-Bilder testen, false

  opt: c, cols, int, cols, #cols of test matrix / function, 8
  opt: r, rows, int, rows, #rows of test matrix / function, 6
  opt: v, verbose, Void, verbose, be verbose, false
  opt: h, help, usage, , This help, false
  AppGen*/

template<typename T1>
double vsum(const T1& img1)
{
  double fsum = 0.0;
  for (int x = 0; x < img1.xsize; x++)
    for (int y = 0; y < img1.ysize; y++)
      {
        fsum += fabs(img1.getPixel(x, y));
      }
  return fsum;
}

template<typename T1, typename T2>
double dsum(const T1& img1, const T2& img2)
{
  double fsum = 0.0;
  for (int x = 0; x < img1.xsize; x++)
    for (int y = 0; y < img1.ysize; y++)
      {
        fsum += fabs(img1.getPixel(x, y) - img2.getPixel(x, y));
      }
  return fsum;
}

/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  try
    {
      if (!(matrices || images || doubleImages))
        {
          matrices = images = doubleImages = true;
        }

      cout << "Test Convolution2D / InvConvolution2D" << endl;

      // with matrix
      if (matrices)
        {

          cout << "input1 matrix<double> (" << rows << "," << cols << "): " << endl;

          matrix<double> m1(rows, cols);
          setFunction(f1type, f1para1, f1para2, m1);
          print(m1, true, true);
	  
	  matrix<double> m2(rows, cols);
	  setFunction(f2type, f2para1, f2para2, m2);

	  cout << "input2 matrix<double> (" << rows << "," << cols << "): " << endl;
          print(m2, true, true);

          Convolution2D convolution;
          cout << "convolution constructed" << endl;

          convolution.setInput(m1, m2);

          matrix<double> m3(rows, cols);
          convolution.getResult(m3);
          cout << "convolution got result" << endl;
          print(m3);

          InvConvolution2D invConvolution;
          cout << "invConvolution constructed" << endl;

	  invConvolution.setInput(m3, m2);
	  
          matrix<double> m4(rows, cols);

          invConvolution.getResult(m4);
          cout << "invConvolution got result" << endl;
	  
          cout << "difference to original matrix (real, imag)" << endl;
          print(m4 - m1);

          double fsum = 0.0;

          for (int i = 0; i < 4; i++)
            for (int k = 0; k < 8; k++)
              {
                fsum += fabs(m4[i][k] - m1[i][k]);
              }
          cout << "sum of deviations of " << (m1.rows()*m1.cols()) << " elements: " << fsum << endl;
          GetChar();
        }
#if false
      // with ImageD
      if (doubleImages)
        {
          int xs = 900;
          int ys = 600;

          cout << "input ImageD(" << xs << "x" << ys << ")" << endl;

          ImageD source;
          source.create(xs, ys);
          setFunction(ftype, fpara1, fpara2, source);

          source.adaptLimits();
          Show(GRAY, source, "source");
          FourierTrafo2D ft3(ys, xs, true);
          ft3.setInput(source);
          ImageD real;
          real.create(xs, ys);
          ImageD imag;
          imag.create(xs, ys);
          ft3.getResult(real, imag);

          real.adaptLimits();
          Show(GRAY, real, "spectrum real");
          GetChar();

          FourierTrafo2D ft4(ys, xs, false);
          ft4.setInput(real, imag);
          ImageD res;
          res.create(xs, ys);
          ImageD resi;
          resi.create(xs, ys);
          ft4.getResult(res, resi);

          double fsum = vsum(resi) + dsum(res, source);

          cout << "sum of deviations of " << (xs * ys) << " elements: " << fsum << endl;
          GetChar();

          Show(OFF, source);
          Show(OFF, real);
          GetChar();
        }

      if (images)
        {
          // with Image
          int xsI = 1200;
          int ysI = 800;
          cout << "input Image(" << xsI << "x" << ysI << ")" << endl;
          cout << "(spectrum as ImageD)" << endl;

          ImageD sourceImgD;
          sourceImgD.create(xsI, ysI, 255);
          setFunction(ftype, fpara1, fpara2, sourceImgD);

          Image sourceImg;
          sourceImg.create(xsI, ysI, 255);
          ConvImgDImg(sourceImgD, sourceImg, ADAPTIVE, SIGNED);
	  Show(GRAY, sourceImg, "source as Image");
          FourierTrafo2D ft5(ysI, xsI, true);
          ft5.setInput(sourceImg);

          ImageD real;
          real.create(xsI, ysI);
          ImageD imag;
          imag.create(xsI, ysI);
          ft5.getResult(real, imag);

	  real.adaptLimits();
	  Show(GRAY,real,"spectrum real");

          FourierTrafo2D ft6(ysI, xsI, false);
          ft6.setInput(real, imag);

          Image resImg;
          resImg.create(xsI, ysI, 255);
          Image resiImg;
          resiImg.create(xsI, ysI, 255);
          ft6.getResult(resImg, resiImg);

          // double isum = vsum(resiImg)+dsum(sourceImg,resImg);
          double isum = dsum(sourceImg, resImg);

          cout << "sum of deviations of " << (xsI * ysI) << " elements: " << isum << endl;
	  
          GetChar();
	  Show(OFF,sourceImg);
	  Show(OFF,real);
        }
      #endif
      return 0;
    }

  catch (const char* msg)
    {
      cerr << "Exception: " << msg << endl;
    }
  catch (const string& msg)
    {
      cerr << "Exception: " << msg << endl;
    }
  catch (const IceException& ex)
    {
      cerr << "IceException: " << ex.what() << endl;
    }
  catch (const exception& ex)
    {
      cerr << "exception: " << ex.what() << endl;
    }

  return 1;
}
