/*
 * bildet "Mittelwert"-Bilder aus einer Vielzahl von Einzelbildern in
 * unterschiedlichster Art und Weise
 * pixelweise Operationen:
 * - Mittelwert
 * - Median (RGB-Werte einzeln)
 * - häufigster Wert (RGB-Werte einzeln)
 * - maximaler Wert
 * - minimaler Wert
 */

#include <image.h>

/*AppGen:Global*/

int xdim, ydim, vmax;

// ermittelt aus Dateiliste alle Bilder
// ermittelt passende Bildgröße als Maximum
void filterImg(vector<string>& z)
{
  // bilder in Textliste z finden
  vector<string> images;

  for (unsigned int i = 0; i < z.size(); ++i)
    {
      if (i % 100 == 0)
        cout << i << "/" << z.size() << endl;
      string filename = z[i];
      // cout << filename<<endl;
      int xda, yda, mva;
      InfImgFile(filename, xda, yda, mva);

          images.push_back(filename);
          if (xda > xdim)
            xdim = xda;
          if (yda > ydim)
            ydim = yda;
          if (mva > vmax)
            vmax = mva;

    }

  z = images;
}

void average(const vector<vector<matrix<int>>>& hist, ColorImage& sum)
{
  // mittelwert aktualisieren
  vector<long int> csum(3);
  vector<int> ct(3);
  for (int y = 0; y < ydim; ++y)
    for (int x = 0; x < xdim; ++x)
      {
        for (int c = 0; c < 3; ++c)
          {
            ct[c] = 0;
            csum[c] = 0;
            for (int v = 0; v < vmax + 1; ++v)
              {
                int cct = hist[y][x][v][c];
                ct[c] += cct;
                csum[c] += cct * v;
              }
          }
        sum.setPixel(x, y, ColorValue(csum[0] / ct[0], csum[1] / ct[1], csum[2] / ct[2]));
      }
}

void min(const vector<vector<matrix<int>>>& hist, ColorImage& sum)
{
  // mittelwert aktualisieren
  vector<int> minval(3);
  for (int y = 0; y < ydim; ++y)
    for (int x = 0; x < xdim; ++x)
      {
        for (int c = 0; c < 3; ++c)
          {
            int v;
            for (v = 0; v < vmax + 1 && hist[y][x][v][c] == 0 ; ++v)
              /* nada*/;
            minval[c] = v;
          }
        sum.setPixel(x, y, ColorValue(minval[0], minval[1], minval[2]));
      }
}

void max(const vector<vector<matrix<int>>>& hist, ColorImage& sum)
{
  // mittelwert aktualisieren
  vector<int> maxval(3);
  for (int y = 0; y < ydim; ++y)
    for (int x = 0; x < xdim; ++x)
      {
        for (int c = 0; c < 3; ++c)
          {
            int v;
            for (v = vmax; v >= 0 && hist[y][x][v][c] == 0 ; --v)
              /* nada*/;
            maxval[c] = v;
          }
        sum.setPixel(x, y, ColorValue(maxval[0], maxval[1], maxval[2]));
      }
}

void median(const vector<vector<matrix<int>>>& hist, ColorImage& sum)
{
  // mittelwert aktualisieren
  vector<int> mval(3);
  for (int y = 0; y < ydim; ++y)
    for (int x = 0; x < xdim; ++x)
      {
        for (int c = 0; c < 3; ++c)
          {
            int ct = 0;
            for (int v = 0; v < vmax + 1; ++v)
              {
                int cct = hist[y][x][v][c];
                ct += cct;
              }
            ct /= 2;
            int ctx = 0;
            for (int v = 0; v < vmax + 1; ++v)
              {
                int cct = hist[y][x][v][c];
                int last = ctx;
                ctx += cct;
                if (last <= ct && ctx > ct)
                  mval[c] = v;
              }
          }
        sum.setPixel(x, y, ColorValue(mval[0], mval[1], mval[2]));
      }
}

void frequent(const vector<vector<matrix<int>>>& hist, ColorImage& sum)
{
  // mittelwert aktualisieren
  vector<int> mval(3);
  for (int y = 0; y < ydim; ++y)
    for (int x = 0; x < xdim; ++x)
      {
        for (int c = 0; c < 3; ++c)
          {
            int maxcount = 0;
            for (int v = 0; v < vmax + 1; ++v)
              {
                int cct = hist[y][x][v][c];
                if (cct > maxcount)
                  {
                    maxcount = cct;
                    mval[c] = v;
                  }
              }
          }
        sum.setPixel(x, y, ColorValue(mval[0], mval[1], mval[2]));
      }
}

/*AppGen
 prog: Mittelung von Einzelbildern
 %% Beschreibung Parameter
 % symbolischerName, Art, Typ,   Variablenname, Erklärung, Default-Wert
 para: dir, optional, string, dir, Verzeichnis mit Bildern, "."
 %
 opt: m, mask, string, filemask, Dateinamens-Maske, "*"
 opt: M, mode, char, mode, Berechnungsmodus, 'a'
 opt2: mode = a - Mittelwert
 opt2: mode = m - Median
 opt2: mode = f - Häufigster Wert
 opt2: mode = i - Minimum
 opt2: mode = A - Maximum
 opt2: mode = I - Interaktive Auswahl
 opt: p, preprocess, char, preprocess, Vorverarbeitung, '-'
 opt: P, postprocess, char, postprocess, Nachbearbeitung, '-'
 opt: o, outfile, string, outfile, Dateiname für Ausgabe des Bildes, "gemitteltesBild.jpg"
 opt: d, display, void, display, Anzeige Mittelung, false
 opt: D, displayrate, int, displayrate, Aktualisiere Anzeige nach n Bildern, 0
 opt: v, verbose, void, verbose, Anzeige der Abarbeitung, false
 opt: b, batch, void, batch, Kein Warten für Batchbearbeitung,false
 opt: h, help, usage, help, Hilfe
AppGen*/
/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/

  bool interactive = false;
  if (mode == 'I')
    {
      interactive = true;
      mode = 'a';
    }

  if (displayrate == 0)
    {
      if (display)
        displayrate = 1;
    }
  else
    display = true;

  vector<string> files;

  bool isImageFile=true;
  try {
    InfImgFile(dir, xdim, ydim, vmax);
      }
  catch(IceException&ex)
  {
    // wenn kein Bild, dann könnte es Verzeichnis sein
    isImageFile=false;
  }
  if (isImageFile)
    {
      // Argument ist Datei: Verzeichnis ermitteln
      // conversion win -> unix
      for (unsigned int i = 0; i < dir.length(); i++)
        if (dir[i] == '\\')
          dir[i] = '/';

      size_t pos = dir.rfind('/');

      if (pos != string::npos)
        {
          dir = dir.substr(0, pos);
        }
    }

  if (verbose)
    cout << (dir + "/" + filemask) << endl;
  Directory(files, dir + "/" + filemask, DIR_FILE | DIR_WITHPATH);

  filterImg(files);

  if (files.size() == 0)
    {
      cout << "Kein Bild vorhanden" << endl;
      exit(1);
    }

  if (files.size() < 2)
    {
      cout << "Zu wenig Bilder" << endl;
      exit(1);
    }

  ColorImage src;
  src.create(xdim, ydim, vmax);

  ColorImage sum;
  sum.create(xdim, ydim, vmax);
  Visual resultDisplay = nullptr;

  if (display)
    {
      Show(ON, src, "Original");
      resultDisplay = Show(ON, sum, "Mittel");
    }

  int maxcount = files.size();

  //  vector<vector<matrix<int> > > hist(ydim);
  vector<vector<matrix<int> > >  hist(ydim);
  for (int y = 0; y < ydim; ++y)
    {
      hist[y].resize(xdim);
      for (int x = 0; x < xdim; ++x)
        {
          hist[y][x] = matrix<int>(vmax + 1, 3);
          hist[y][x].set(0);
        }
    }

  int displaycounter = 0;

  for (unsigned int i = 0; i < files.size(); ++i)
    {
      string filename = files[i];
      if (verbose)
        cout << i << "/" << files.size() << ": " << filename << endl;
      src.read(filename);
      switch (preprocess)
        {
        case 'h':
          HistogramEqualization(src, src);
          break;
        }
      WindowWalker w(src.redImage());
      for (w.init(); !w.ready(); w.next())
        {
          ColorValue cv = src.getPixel(w);
          for (int i = 0; i < 3; ++i)
            hist[w.y][w.x][cv[i]][i]++;
        }
      if (display)
        {
          ++displaycounter;
          if (displaycounter >= displayrate)
            {
              displaycounter = 0;
              switch (mode)
                {
                case 'a':
                  average(hist, sum);
                  break;
                case 'm':
                  median(hist, sum);
                  break;
                case 'f':
                  frequent(hist, sum);
                  break;
                case 'i':
                  min(hist, sum);
                  break;
                case 'A':
                  max(hist, sum);
                  break;
                }
              switch (postprocess)
                {
                case 'h':
                  HistogramEqualization(sum, sum);
                  break;
                }
            }
        }
    }

  do
    {
      switch (mode)
        {
        case 'a':
          average(hist, sum);
          break;
        case 'm':
          median(hist, sum);
          break;
        case 'f':
          frequent(hist, sum);
          break;
        case 'i':
          min(hist, sum);
          break;
        case 'A':
          max(hist, sum);
          break;
        }
      switch (postprocess)
        {
        case 'h':
          HistogramEqualization(sum, sum);
          break;
        }

      if (interactive)
        {
          int c = GetChar();
          switch (c)
            {
            case 'a':
              mode = 'a';
              break;
            case 'A':
              mode = 'A';
              break;
            case 'm':
              mode = 'm';
              break;
            case 'f':
              mode = 'f';
              break;
            case 'i':
              mode = 'i';
              break;
            case 'q':
              mode = 'q';
              break;

            }
          Print("Mode: " + string(&mode) + "\n");
        }
    }
  while (interactive && mode != 'q');

  if (!outfile.empty())
    {
      sum.write(outfile);
    }

  if (!batch && !interactive)
    {
      cout << "Press <Enter> to finish" << endl;
      cin.get();
    }

  return 1;
}
