#include <image.h>
#include <FourierTrafo2D.h>
#include <FourierTrafo.h>

/*AppGen:Global*/

/*AppGen
prog: Shift estimation
%%Beschreibung Parameter
%symbolischerName,Art,Typ,Variablenname,ErklÃ¤rung,Default-Wert
para: file1,required,string,fn1,First image file,""
para: file2,optional,string,fn2,Second image file,""
%
opt: b, beta, double, beta, Regularisation parameter, 100
opt: s, sizes, int, selectionSize, radius of selection, 64
opt: f, factor, int, sdrFactor, Resolution factor, 1
opt: w, windowmode, int, windowMode, Mode for windowing, 0
opt: v, verbose, void,verbose, Be verbose, false
opt: h, help, usage, help, Hilfe
AppGen*/

double getF(double r, double selectionSize)
{
  double rn = r * M_PI / selectionSize;
  if (rn >= M_PI)
    return 0;
  return 0.5 * (1 + cos(rn));
}

void mark(Image& mi, Window w, int color)
{
  Line(w.p1.x, w.p1.y, w.p1.x, w.p2.y, color, mi);
  Line(w.p1.x, w.p1.y, w.p2.x, w.p1.y, color, mi);
  Line(w.p2.x, w.p2.y, w.p1.x, w.p2.y, color, mi);
  Line(w.p2.x, w.p2.y, w.p2.x, w.p1.y, color, mi);
}

void mark(Image& mi, Window& alt, Window neu, int color)
{
  mark(mi, alt, 0);
  mark(mi, neu, color);
  alt = neu;
}

/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  try
    {
      if (fn2.empty())
        fn2 = fn1;
      if (fn1.empty())
        throw "No filename given";

      Image img1;
      if (verbose)
        cout << "reading image one" << endl;
      img1.read(fn1);
      Image mark1;
      mark1.create(img1);
      mark1.set(0);

      Show(OVERLAY3, img1, mark1);

      int xSize = img1.xsize;
      int ySize = img1.ysize;

      Image img1w;
      img1w.create(img1);
      Show(GRAY, img1w);

      Image img2;
      if (verbose)
        cout << "reading image two" << endl;
      img2.read(fn2);
      if (img2.xsize != xSize || img2.ysize != ySize)
        throw "image sizes do not match";

      Image mark2;
      mark2.create(img2);
      Show(OVERLAY, img2, mark2);
      mark2.set(0);

      ImageD peak;
      if (verbose)
        cout << "creating peak image" << endl;
      peak.create(xSize * sdrFactor, ySize * sdrFactor);
      Show(GRAY, peak);

      Sdr sdr(xSize, ySize, beta, sdrFactor, windowMode);

      bool cont = true;
      while (cont)
        {
          Point p1 = SelPoint(img1);
          IPoint p1i(p1.x, p1.y);
          if (img1.inside(p1i))
            {
              WindowWalker w(img1);
              double gsum = 0.0;
              int n = 0;
              for (w.init(); !w.ready(); w.next())
                {
                  Point pd(w);
                  double r = (pd - p1).length();
                  double f = getF(r, selectionSize);
                  if (f >= 0.05)
                    {
                      gsum += img1.getPixel(w);
                      n++;
                    }
                }
              double gMean = gsum / n;
              for (w.init(); !w.ready(); w.next())
                {
                  Point pd(w);
                  double r = (pd - p1).length();
                  double f = getF(r, selectionSize);
                  IPoint dp = w - p1i;
                  dp.x = (dp.x + xSize + xSize / 2) % xSize;
                  dp.y = (dp.y + ySize + ySize / 2) % ySize;
                  double nVal = (img1.getPixel(w) - gMean) * f + gMean;
                  img1w.setPixel(dp, nVal);
                  if (f < 0.05)
                    mark1.setPixel(w, 1);
                  else
                    mark1.setPixel(w, 0);
                }

              sdr.setInput(img1w, img2);
              sdr.getPeak(peak);
              peak.adaptLimits();

              Point maxp;
              double maxv = peak.getPixel(0, 0);
              for (w.init(); !w.ready(); w.next())
                {
                  if (peak.getPixel(w) > maxv)
                    {
                      maxp = w;
                      maxv = peak.getPixel(w);
                    }
                }

              // Marker(2,peak,3,5,peak);
              //      Neighbor8Walker ww(IPoint(maxp));
              //      for (ww.init();!ww.ready();ww.next())
              //        peak.setPixel(ww,0);
              Point dp = maxp - Point(peak.xsize / 2, peak.ysize / 2);
              Marker(1, p1 + dp, 3, 5, mark2);
              cout << dp << endl;
            }
        }
    }

  catch (const char* msg)
    {
      cout << "Exception: " << msg << endl;
    }
  return OK;
}
