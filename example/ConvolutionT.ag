#include <iomanip>

#include <image.h>
#include <Convolution.h>

// test class Convolution

#include "vectorfunctiontools.cpp"

/*AppGen:Global*/

/*AppGen
prog: test of ConvolutionC
%%Beschreibung Parameter
%symbolischerName,Art,Typ,Variablenname,Erkl√§rung,Default-Wert
%
opt: 1, function1, int, f1type, Type of first function, 1
opt: 2, function2, int, f2type, Type of second function, 2
opt2:  0 - delta function
opt2:  1 - sin function
opt2:  2 - cos function
opt2:  3 - rectangle function
opt: p, parameter1, double, f1para, Parameter for function1, 0.0
opt: P, parameter2,double, f2para, Parameter for funtion2, 0.0
opt: n, vsize, int, vsize, vektor size, 9
opt: v, verbose, void, verbose, more messages during processing, false
opt: h, help, usage, help, Hilfe
AppGen*/

/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  try
    {
      vector<double> f1(vsize, 0.0);
      vector<double> f2(vsize, 0.0);

      setFunction(f1type, f1para, f1);
      setFunction(f2type, f2para, f2);

      cout << "\"manual\" convolution" << endl;
      print(f1, true);
      print(f2, false);

      vector<double> result1(vsize, 0.0);
      for (int i = 0; i < vsize; i++)
        {
          double sum = 0;
          for (int k = 0; k < vsize; k++)
            sum += f1[k] * f2[(vsize + i - k) % vsize];
          result1[i] = sum;
        }
      print(result1, true);

      cout << endl << "convolution with class Convolution" << endl;
      print(f1, true);
      print(f2, false);
      vector<double> result2;
      Convolution conv;
      conv.setInput(f1, f2);
      conv.getResult(result2);
      print(result2, true);
      cout << "difference" << endl;
      print(result2 - result1, true, true);

      vector<double> result3;
      cout << "static method of Convolution" << endl;
      print(f1, true);
      print(f2, false);
      Convolution::convolute(f1, f2, result3);
      print(result3, true);
      cout << "difference" << endl;
      print(result3 - result1, false, true);

    }
  catch (const char* msg)
    {
      cout << "Exception: " << msg << endl;
    }
  return OK;
}
