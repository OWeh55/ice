/*
 * stellt LSI-Filter-Masken dar
 */

#include <image.h>

/*AppGen:Global*/

/*AppGen
 prog: Darstellung von Filtermasken
 %% Beschreibung Parameter
 % symbolischerName, Art, Typ,   Variablenname, Erklärung, Default-Wert
 % para: dir, optional, string, dir, Verzeichnis mit Bildern, "."
 %
 opt: x, xsize, int, xSize, Größe der Darstellung x, 512
 opt: y, ysize, int, ySize, Größe der Darstellung y, 512
 opt: s, filtersize, int, fSize, Filtergröße, 13
 opt: w, width, double, width, Filter-Breite, 5
 opt: l, length, double, length, Filter-Länge, 11
 opt: a, alpha, double, alpha, Winkel, 33
 opt: v, verbose, void, verbose, Anzeige der Abarbeitung, false
 opt: h, help, usage, help, Hilfe
AppGen*/
/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  try {
    LSIFilter f=makeOrientedDoBFilter(fSize,Arcus(alpha),length,width);

    Image img;
    img.create(xSize,ySize,255);
    Show(ON,img,"filter");

    int dx=f.getDX();
    int dy=f.getDY();
    int dimx=f.getXDimension();
    int dimy=f.getYDimension();
    
    double min=0;
    double max=0;

    for (int y=-dy;y<=dy;y++)
      for (int x=-dx;x<=dx;x++)
	{
	  double maskValue=f.getMask(x+dx,y+dy);
	  if (maskValue<min)
	    min=maskValue;
	  if (maskValue>max)
	    max=maskValue;
	}

    int nValue=(0-min)*255/(max-min);
    img.set(nValue);

    const int border=5;
    int ySizeB=ySize-border*2;
    int xSizeB=xSize-border*2;

    for (int y=border;y<ySize-border;y++)
      {
	int yf=(y-border)*dimy/(ySizeB);
	for (int x=border;x<xSize-border;x++)
	  {
	    int xf=(x-border)*dimx/xSizeB;
	    double mValue=f.getMask(xf,yf);
	    img.setPixel(x,y,(mValue-min)*255/(max-min));
	}
      }
    GetChar();
    return 1;
  }
  catch (IceException ex)
    {
      cout << " Exception " << ex.what() << endl;
    }
}
