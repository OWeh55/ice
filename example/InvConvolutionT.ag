#include <iomanip>

#include <image.h>
#include <Convolution.h>
#include <InvConvolution.h>

// test class IncConvolutionC

#include "vectorfunctiontools.cpp"

/*AppGen:Global*/

/*AppGen
prog: test class InvConvolution
%% Beschreibung Parameter
%symbolischerName,Art,Typ,Variablenname,Erkl√§rung,Default-Wert
%% Beschreibung Optionen
% opt: short option, long option, parameter type, variable name, description (help), default value
opt: 1, function1, int, f1type, Type of first function, 3
opt: 2, function2, int, f2type, Type of second function, 4
opt2:  0 - delta function
opt2:  1 - sin function
opt2:  2 - cos function
opt2:  3 - rectangle function
opt2:  4 - white noise
opt: p, parameter1, double, f1para, Parameter for function1, 0.0
opt: P, parameter2,double, f2para, Parameter for funtion2, 0.0
opt: n, vsize, int, vsize, vector size, 9
opt: b, beta, double, beta, Beta, 0.001
%opt: v, verbose, void, verbose, more messages during processing, false
opt: h, help, usage, help, This help
AppGen*/

/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  try
    {
      vector<double> f1(vsize, 0.0);
      vector<double> f2(vsize, 0.0);

      setFunction(f1type, f1para, f1);
      setFunction(f2type, f2para, f2);

      cout << "convolution f3 = f1 * f2 with ConvolutionC" << endl;
      cout << "f1 ";
      print(f1, false);
      cout << "f2 ";
      print(f2, false);

      vector<double> convoluted;
      Convolution conv;
      conv.setInput(f1, f2);
      conv.getResult(convoluted);
      cout << "f3 ";
      print(convoluted, false);

      vector<double> deconvoluted;
      cout << "deconvolution with InvConvolutionC (restore f1 from f2 and f3)" << endl;
      cout << "f3 ";
      print(convoluted, false);
      cout << "f2 ";
      print(f2, false);
      InvConvolution ic(vsize, beta);
      ic.setInput(convoluted, f2);
      ic.getResult(deconvoluted);
      cout << "f1r";
      print(deconvoluted, false);
      cout << "difference" << endl;
      cout << "df ";
      print(deconvoluted - f1, false, true);

    }
  catch (const char* msg)
    {
      cout << "Exception: " << msg << endl;
    }
  return OK;
}
