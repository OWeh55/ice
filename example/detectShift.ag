#include <image.h>

/*AppGen:Global*/

/*AppGen
 prog: Test of shift detection methodes
 %% Beschreibung Parameter
 % symbolischerName, Art, Typ,   Variablenname, Erkl√§rung, Default-Wert
 %% Optionen
 %
 opt: X, xsize, int, xSize, Image size x, 1111
 opt: Y, ysize, int, ySize, Image size y, 888
 opt: f, file, string, filename, Use image file, ""
 opt: F, secondfile, string, filename2, Second image file, ""
 opt: x, deltax, double, deltaX, Offset x, 4.7
 opt: y, deltay, double, deltaY, Offset y, -2.3
 opt: c, cyclic, void, cyclic, Use cyclic shift, false
 opt: b, beta, double, beta, Parameter beta, 0.001
 opt: v, verbose, void, verbose, Many messages, false
 opt: h, help, usage, help, Hilfe
AppGen*/

Image createImage(int sx, int sy, double dx, double dy, vector<int> freqs)
{
  ImageD imgd;
  imgd.create(sx, sy);
  imgd.set(0);
  for (int f : freqs)
    {
      double omegax = f * 2 * M_PI / sx;
      double omegay = f * 2 * M_PI / sy;
      double ax = 1.0 + drand48() * 0.3;
      double ay = 1.0 + drand48() * 0.3;
      for (int x = 0; x < sx; x++)
        for (int y = 0; y < sy; y++)
          {
            double val = sin((x - dx) * omegax) * ax + sin((y - dy) * omegay) * ay;
            imgd.setPixel(x, y, val + imgd.getPixel(x, y));
          }
    }
  Image res;
  res.create(sx, sy, 255);
  ConvImgDImg(imgd, res, ADAPTIVE);
  return res;
}

void shift(Image& i1, Image& i2, double deltaX, double deltaY, bool cyclic)
{
  for (int y = 0; y < i1.ysize; y++)
    for (int x = 0; x < i1.xsize; x++)
      {
        double xf = cyclic ? FMod(x - deltaX, i1.xsize) : x - deltaX;
        double yf = cyclic ? FMod(y - deltaY, i1.ysize) : y - deltaY;
        i2.setPixel(x, y, i1.getPixelInterpol(xf, yf));
      }
}

/*AppGen:Main*/
int main(int argc, char* argv[])
{
  /*AppGen:MainEnd*/
  bool shiftGiven = true;

  Image i1, i2;
  if (filename.empty())
    {
      vector<int> freqs{1, 3, 11};
      i1 = createImage(xSize, ySize, 0, 0, freqs);
      i2 = createImage(xSize, ySize, deltaX, deltaY, freqs);
    }
  else
    {
      i1.read(filename);
      xSize = i1.xsize;
      ySize = i1.ysize;
      if (filename2.empty())
        {
          i2.create(xSize, ySize, i1.maxval);
          shift(i1, i2, deltaX, deltaY, cyclic);
        }
      else
        {
          i2.read(filename2);
          shiftGiven = false;
        }
    }

  Show(GRAY, i1, "original");
  Show(GRAY, i2, "shifted");

  ImageD psf;
  psf.create(xSize, ySize);

  InvConvolution(i1, i2, psf, beta);
  psf.adaptLimits();
  Show(GRAY, psf, "psf");

  if (shiftGiven)
    cout << "given shift: " << deltaX << "," << deltaY << endl;
  double ex, ey;
  double val = detectShift(i1, i2, ex, ey, beta);
  cout << "detected shift: " << ex << "," << ey << endl;
  if (shiftGiven)
    cout << "error: " << ex - deltaX << "," << ey - deltaY << endl;
  cout << "quality: " << val << endl;

  GetChar();
  Show(OFF, psf);

  Trafo tr;
  if (detectTrafo(i1, i2, tr, beta))
    {
      cout << "Trafo: " << tr.getMatrix() << endl;
    }
  else
    {
      cout << "Cannot detect trafo" << endl;
    }

  GetChar();

  return 1;
}
